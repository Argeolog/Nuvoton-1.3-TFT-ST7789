<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\FMC_RW.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\FMC_RW.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Fri Sep 13 16:47:36 2024
<BR><P>
<H3>Maximum Stack Usage =        776 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; st7789_write_string &rArr; a_st7789_show_char &rArr; a_st7789_draw_point &rArr; a_st7789_write_bytes
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">SysTick_Handler</a><BR>
 <LI><a href="#[33]">ACMP01_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[33]">ACMP01_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[33]">ACMP01_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[8]">BOD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[34]">BPWM0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3d]">BPWM1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1f]">BRAKE0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[23]">BRAKE1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[c]">CLKFAIL_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3f]">CRPT_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[30]">DAC_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[b]">DEFAULT_IRQHandler</a> from startup_m251.o(.text) referenced 4 times from startup_m251.o(RESET)
 <LI><a href="#[31]">EADC_INT0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[32]">EADC_INT1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[35]">EADC_INT2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[36]">EADC_INT3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[11]">EINT0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[12]">EINT1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[13]">EINT2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[14]">EINT3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[15]">EINT4_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[16]">EINT5_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[17]">GPA_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[18]">GPB_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[19]">GPC_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1a]">GPD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1b]">GPE_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1c]">GPF_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[4]">GetChar</a> from retarget.o(.text.GetChar) referenced from startup_m251.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from m251_it.o(.text.HardFault_Handler) referenced from startup_m251.o(RESET)
 <LI><a href="#[2d]">I2C0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2e]">I2C1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[9]">IRCTRIM_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[42]">LCD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from m251_it.o(.text.NMI_Handler) referenced from startup_m251.o(RESET)
 <LI><a href="#[43]">OPA_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2f]">PDMA_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3e]">PSIO_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[20]">PWM0_P0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[21]">PWM0_P1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[22]">PWM0_P2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[24]">PWM1_P0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[25]">PWM1_P1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[26]">PWM1_P2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[a]">PWRWU_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[6]">PendSV_Handler</a> from m251_it.o(.text.PendSV_Handler) referenced from startup_m251.o(RESET)
 <LI><a href="#[48]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from startup_m251.o(.text)
 <LI><a href="#[1d]">QSPI0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[40]">SC0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[49]">SH_Return</a> from retarget.o(.text.SH_Return) referenced from startup_m251.o(.text)
 <LI><a href="#[1e]">SPI0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3a]">SPI1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[5]">SVC_Handler</a> from m251_it.o(.text.SVC_Handler) referenced from startup_m251.o(RESET)
 <LI><a href="#[3]">SendChar_ToUART</a> from retarget.o(.text.SendChar_ToUART) referenced from startup_m251.o(RESET)
 <LI><a href="#[7]">SysTick_Handler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[46]">SystemInit</a> from system_m251.o(.text.SystemInit) referenced from startup_m251.o(.text)
 <LI><a href="#[e]">TAMPER_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[44]">TK_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[27]">TMR0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[28]">TMR1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[29]">TMR2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2a]">TMR3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2b]">UART0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[2c]">UART1_IRQHandler</a> from m251_it.o(.text.UART1_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[37]">UART2_IRQHandler</a> from m251_it.o(.text.UART2_IRQHandler) referenced from startup_m251.o(RESET)
 <LI><a href="#[38]">UART3_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3c]">USBD_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[39]">USCI0_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[3b]">USCI1_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[41]">USCI2_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[f]">WDT_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[10]">WWDT_IRQHandler</a> from startup_m251.o(.text) referenced from startup_m251.o(RESET)
 <LI><a href="#[47]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m251.o(.text)
 <LI><a href="#[56]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[56]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[55]">fputc</a> from retarget.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[45]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4e]">st7789_interface_cmd_data_gpio_deinit</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_cmd_data_gpio_deinit) referenced from main.o(.text.main)
 <LI><a href="#[4d]">st7789_interface_cmd_data_gpio_init</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_cmd_data_gpio_init) referenced from main.o(.text.main)
 <LI><a href="#[4f]">st7789_interface_cmd_data_gpio_write</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_cmd_data_gpio_write) referenced from main.o(.text.main)
 <LI><a href="#[54]">st7789_interface_debug_print</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_debug_print) referenced from main.o(.text.main)
 <LI><a href="#[53]">st7789_interface_delay_ms</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_delay_ms) referenced from main.o(.text.main)
 <LI><a href="#[51]">st7789_interface_reset_gpio_deinit</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_reset_gpio_deinit) referenced from main.o(.text.main)
 <LI><a href="#[50]">st7789_interface_reset_gpio_init</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_reset_gpio_init) referenced from main.o(.text.main)
 <LI><a href="#[52]">st7789_interface_reset_gpio_write</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_reset_gpio_write) referenced from main.o(.text.main)
 <LI><a href="#[4b]">st7789_interface_spi_deinit</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_spi_deinit) referenced from main.o(.text.main)
 <LI><a href="#[4a]">st7789_interface_spi_init</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_spi_init) referenced from main.o(.text.main)
 <LI><a href="#[4c]">st7789_interface_spi_write_cmd</a> from m251_driver_st7789_interface_1.o(.text.st7789_interface_spi_write_cmd) referenced from main.o(.text.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[59]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[70]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ea]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[eb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP01_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>CLKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>CRPT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DEFAULT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>EADC_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EADC_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EADC_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EADC_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GPC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRCTRIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>OPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>PSIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>PWM0_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>PWM0_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWM0_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PWM1_P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PWM1_P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PWM1_P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USCI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m251.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SH_DoCommand</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_m251.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[58]"></a>__PC</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup_m251.o(.text), UNUSED, KEPT)

<P><STRONG><a name="[c8]"></a>rand</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_clear
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_debug_print
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_info
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d0]"></a>strncpy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_info
</UL>

<P><STRONG><a name="[c5]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_debug_print
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vcoms_offset_convert_to_register
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vdv_convert_to_register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vrhs_convert_to_register
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vcom_convert_to_register
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vcoms_offset_convert_to_register
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vdv_convert_to_register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vrhs_convert_to_register
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vcom_convert_to_register
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vcoms_offset_convert_to_register
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vdv_convert_to_register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vrhs_convert_to_register
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vcom_convert_to_register
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[5f]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5a]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>__aeabi_uidiv$div0</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[f5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[f6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[69]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7f]"></a>CLK_DisablePLL</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text.CLK_DisablePLL))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[80]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_clock_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[7e]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[72]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[74]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, clk.o(.text.CLK_GetPCLK0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>

<P><STRONG><a name="[75]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, clk.o(.text.CLK_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[7b]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 160 bytes, Stack size 28 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[76]"></a>CLK_SetHCLK</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[81]"></a>CLK_SetModuleClock</STRONG> (Thumb, 152 bytes, Stack size 52 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[77]"></a>CLK_WaitClockReady</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[86]"></a>GPIO_SetMode</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, gpio.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_spi_cs_init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_clock_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_write
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_deinit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_init
</UL>

<P><STRONG><a name="[4]"></a>GetChar</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.text.GetChar))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, m251_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m251_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m251_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ProcessHardFault</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ProcessHardFault &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpStack
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>SH_Return</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, retarget.o(.text.SH_Return))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SH_Return
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>SPI_Close</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, spi.o(.text.SPI_Close))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_deinit
</UL>

<P><STRONG><a name="[cf]"></a>SPI_EnableAutoSS</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, spi.o(.text.SPI_EnableAutoSS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_EnableAutoSS
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[7a]"></a>SPI_Open</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, spi.o(.text.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SPI_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[5]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m251_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>SYS_Init</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, main.o(.text.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SYS_Init &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_DisablePLL
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart0DefaultMPF
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>SendChar</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[3]"></a>SendChar_ToUART</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, system_m251.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_clock_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_init
</UL>

<P><STRONG><a name="[46]"></a>SystemInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, system_m251.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(.text)
</UL>
<P><STRONG><a name="[2c]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m251_it.o(.text.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, m251_it.o(.text.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m251.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>UART_Open</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[db]"></a>UART_Write</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, uart.o(.text.UART_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[82]"></a>Uart0DefaultMPF</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, system_m251.o(.text.Uart0DefaultMPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart0DefaultMPF
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[8b]"></a>delay_ms</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, delay_1.o(.text.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_ms &rArr; CLK_SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_delay_ms
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[55]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fputc &rArr; SendChar &rArr; SendChar_ToUART
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[45]"></a>main</STRONG> (Thumb, 1992 bytes, Stack size 568 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = main &rArr; st7789_write_string &rArr; a_st7789_show_char &rArr; a_st7789_draw_point &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_deinit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_draw_point
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_rect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_string
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_clear
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_on
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_program_mode_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_equalize_time_control
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_power_control_2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_spi2_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gate
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_gate_line_convert_to_register
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_digital_gamma_look_up_table_blue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_digital_gamma_look_up_table_red
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_delay_ms
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_negative_voltage_gamma_control
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_positive_voltage_gamma_control
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_command_2_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_power_control_1
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_pwm_frequency
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_cabc_control
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_frame_rate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vcoms_offset
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vcoms_offset_convert_to_register
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vdv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vdv_convert_to_register
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vrhs
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vrhs_convert_to_register
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vdv_vrh_from
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_lcm_control
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vcoms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_vcom_convert_to_register
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_digital_gamma
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gate_on_timing_adjustment
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gate_control
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_partial_mode_control
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_frame_rate_control
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_porch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_rgb_interface_control
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_ram_control
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_cabc_minimum_brightness
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_brightness_control_and_color_enhancement
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_display_control
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_display_brightness
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_interface_pixel_format
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_memory_data_access_control
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gamma
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_inversion_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_normal_display_mode_on
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_idle_mode_off
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_sleep_out
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_row
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_column
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_info
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[90]"></a>shell_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, shell.o(.text.shell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = shell_init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>spi_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi2_1.o(.text.spi_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = spi_deinit &rArr; SPI_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_spi_deinit
</UL>

<P><STRONG><a name="[cd]"></a>spi_init</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, spi2_1.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = spi_init &rArr; SPI_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_spi_cs_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EnableAutoSS
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_spi_init
</UL>

<P><STRONG><a name="[d9]"></a>spi_write_cmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spi2_1.o(.text.spi_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_spi_write_cmd
</UL>

<P><STRONG><a name="[c4]"></a>st7789_clear</STRONG> (Thumb, 688 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_clear &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>st7789_deinit</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, driver_st7789_1.o(.text.st7789_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = st7789_deinit &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>st7789_display_inversion_on</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, driver_st7789_1.o(.text.st7789_display_inversion_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = st7789_display_inversion_on &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>st7789_display_on</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, driver_st7789_1.o(.text.st7789_display_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = st7789_display_on &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>st7789_draw_point</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = st7789_draw_point &rArr; a_st7789_draw_point &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c7]"></a>st7789_fill_rect</STRONG> (Thumb, 1080 bytes, Stack size 56 bytes, driver_st7789_1.o(.text.st7789_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = st7789_fill_rect &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>st7789_gate_line_convert_to_register</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, driver_st7789_1.o(.text.st7789_gate_line_convert_to_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st7789_gate_line_convert_to_register
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>st7789_idle_mode_off</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, driver_st7789_1.o(.text.st7789_idle_mode_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = st7789_idle_mode_off &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>st7789_info</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = st7789_info &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>st7789_init</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, driver_st7789_1.o(.text.st7789_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st7789_init
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>st7789_interface_cmd_data_gpio_deinit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_cmd_data_gpio_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = st7789_interface_cmd_data_gpio_deinit &rArr; wire_deinit &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[4d]"></a>st7789_interface_cmd_data_gpio_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_cmd_data_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = st7789_interface_cmd_data_gpio_init &rArr; wire_init &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[4f]"></a>st7789_interface_cmd_data_gpio_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_cmd_data_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = st7789_interface_cmd_data_gpio_write &rArr; wire_write &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[54]"></a>st7789_interface_debug_print</STRONG> (Thumb, 74 bytes, Stack size 296 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_debug_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = st7789_interface_debug_print &rArr; uart_write &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[53]"></a>st7789_interface_delay_ms</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = st7789_interface_delay_ms &rArr; delay_ms &rArr; CLK_SysTickDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[51]"></a>st7789_interface_reset_gpio_deinit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_reset_gpio_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st7789_interface_reset_gpio_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_clock_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[50]"></a>st7789_interface_reset_gpio_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_reset_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = st7789_interface_reset_gpio_init &rArr; wire_clock_init &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_clock_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[52]"></a>st7789_interface_reset_gpio_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_reset_gpio_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = st7789_interface_reset_gpio_write &rArr; wire_clock_write
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_clock_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[4b]"></a>st7789_interface_spi_deinit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_spi_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = st7789_interface_spi_deinit &rArr; spi_deinit &rArr; SPI_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[4a]"></a>st7789_interface_spi_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = st7789_interface_spi_init &rArr; spi_init &rArr; SPI_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[4c]"></a>st7789_interface_spi_write_cmd</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, m251_driver_st7789_interface_1.o(.text.st7789_interface_spi_write_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = st7789_interface_spi_write_cmd &rArr; spi_write_cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[99]"></a>st7789_normal_display_mode_on</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, driver_st7789_1.o(.text.st7789_normal_display_mode_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = st7789_normal_display_mode_on &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>st7789_set_brightness_control_and_color_enhancement</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_brightness_control_and_color_enhancement))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_brightness_control_and_color_enhancement &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b5]"></a>st7789_set_cabc_control</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_cabc_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_cabc_control &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>st7789_set_cabc_minimum_brightness</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_cabc_minimum_brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_cabc_minimum_brightness &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>st7789_set_column</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, driver_st7789_1.o(.text.st7789_set_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = st7789_set_column
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>st7789_set_command_2_enable</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_command_2_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_command_2_enable &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>st7789_set_digital_gamma</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_digital_gamma))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_digital_gamma &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>st7789_set_digital_gamma_look_up_table_blue</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_digital_gamma_look_up_table_blue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_digital_gamma_look_up_table_blue &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>st7789_set_digital_gamma_look_up_table_red</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_digital_gamma_look_up_table_red))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_digital_gamma_look_up_table_red &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>st7789_set_display_brightness</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_display_brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_display_brightness &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>st7789_set_display_control</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_display_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_display_control &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>st7789_set_equalize_time_control</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_equalize_time_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_equalize_time_control &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>st7789_set_frame_rate</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_frame_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_frame_rate &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>st7789_set_frame_rate_control</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, driver_st7789_1.o(.text.st7789_set_frame_rate_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = st7789_set_frame_rate_control &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>st7789_set_gamma</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_gamma))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_gamma &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>st7789_set_gate</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_gate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_gate &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>st7789_set_gate_control</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_gate_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_gate_control &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>st7789_set_gate_on_timing_adjustment</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_gate_on_timing_adjustment))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_gate_on_timing_adjustment &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>st7789_set_interface_pixel_format</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_interface_pixel_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_interface_pixel_format &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>st7789_set_lcm_control</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_lcm_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_lcm_control &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>st7789_set_memory_data_access_control</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_memory_data_access_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_memory_data_access_control &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>st7789_set_negative_voltage_gamma_control</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_negative_voltage_gamma_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_negative_voltage_gamma_control &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>st7789_set_partial_mode_control</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_partial_mode_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_partial_mode_control &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a4]"></a>st7789_set_porch</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, driver_st7789_1.o(.text.st7789_set_porch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = st7789_set_porch &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>st7789_set_positive_voltage_gamma_control</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_positive_voltage_gamma_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_positive_voltage_gamma_control &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>st7789_set_power_control_1</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_power_control_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_power_control_1 &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c0]"></a>st7789_set_power_control_2</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_power_control_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_power_control_2 &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>st7789_set_program_mode_enable</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_program_mode_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_program_mode_enable &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>st7789_set_pwm_frequency</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_pwm_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_pwm_frequency &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>st7789_set_ram_control</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_ram_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_ram_control &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>st7789_set_rgb_interface_control</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, driver_st7789_1.o(.text.st7789_set_rgb_interface_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = st7789_set_rgb_interface_control &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>st7789_set_row</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, driver_st7789_1.o(.text.st7789_set_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = st7789_set_row
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bf]"></a>st7789_set_spi2_enable</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.st7789_set_spi2_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = st7789_set_spi2_enable &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>st7789_set_vcoms</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_vcoms))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_vcoms &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>st7789_set_vcoms_offset</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_vcoms_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_vcoms_offset &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>st7789_set_vdv</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_vdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_vdv &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>st7789_set_vdv_vrh_from</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_vdv_vrh_from))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_vdv_vrh_from &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>st7789_set_vrhs</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_set_vrhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = st7789_set_vrhs &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>st7789_sleep_out</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, driver_st7789_1.o(.text.st7789_sleep_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = st7789_sleep_out &rArr; a_st7789_write_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[aa]"></a>st7789_vcom_convert_to_register</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_vcom_convert_to_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = st7789_vcom_convert_to_register &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b2]"></a>st7789_vcoms_offset_convert_to_register</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_vcoms_offset_convert_to_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = st7789_vcoms_offset_convert_to_register &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>st7789_vdv_convert_to_register</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_vdv_convert_to_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = st7789_vdv_convert_to_register &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>st7789_vrhs_convert_to_register</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, driver_st7789_1.o(.text.st7789_vrhs_convert_to_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = st7789_vrhs_convert_to_register &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>st7789_write_string</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, driver_st7789_1.o(.text.st7789_write_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = st7789_write_string &rArr; a_st7789_show_char &rArr; a_st7789_draw_point &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>uart_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, uart2_1.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = uart_init &rArr; UART_Open &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d5]"></a>uart_write</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, uart2_1.o(.text.uart_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uart_write &rArr; UART_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_debug_print
</UL>

<P><STRONG><a name="[d6]"></a>wire_clock_deinit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wire_1.o(.text.wire_clock_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_reset_gpio_deinit
</UL>

<P><STRONG><a name="[d7]"></a>wire_clock_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wire_1.o(.text.wire_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = wire_clock_init &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_reset_gpio_init
</UL>

<P><STRONG><a name="[d8]"></a>wire_clock_write</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, wire_1.o(.text.wire_clock_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wire_clock_write
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_reset_gpio_write
</UL>

<P><STRONG><a name="[d1]"></a>wire_deinit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wire_1.o(.text.wire_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wire_deinit &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_cmd_data_gpio_deinit
</UL>

<P><STRONG><a name="[d2]"></a>wire_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wire_1.o(.text.wire_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wire_init &rArr; SystemCoreClockUpdate &rArr; CLK_GetPLLClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_cmd_data_gpio_init
</UL>

<P><STRONG><a name="[d3]"></a>wire_write</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wire_1.o(.text.wire_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wire_write &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_cmd_data_gpio_write
</UL>

<P><STRONG><a name="[dd]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f8]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[fa]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[78]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[df]"></a>__0snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fb]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[fc]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[fd]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[92]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>__0vsnprintf</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fe]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[ff]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[100]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[d4]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_interface_debug_print
</UL>

<P><STRONG><a name="[71]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[101]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7d]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[8e]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>DumpStack</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, retarget.o(.text.DumpStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DumpStack
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[88]"></a>a_st7789_write_byte</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.a_st7789_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_deinit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_rect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_clear
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_on
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_program_mode_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_equalize_time_control
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_power_control_2
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_spi2_enable
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_digital_gamma_look_up_table_blue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_digital_gamma_look_up_table_red
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_negative_voltage_gamma_control
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_positive_voltage_gamma_control
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_command_2_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_power_control_1
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_pwm_frequency
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_cabc_control
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_frame_rate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vcoms_offset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vdv
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vrhs
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vdv_vrh_from
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_lcm_control
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vcoms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_digital_gamma
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gate_on_timing_adjustment
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gate_control
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_partial_mode_control
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_frame_rate_control
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_porch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_rgb_interface_control
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_ram_control
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_cabc_minimum_brightness
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_brightness_control_and_color_enhancement
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_display_control
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_display_brightness
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_interface_pixel_format
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_memory_data_access_control
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gamma
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_display_inversion_on
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_normal_display_mode_on
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_idle_mode_off
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_sleep_out
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_draw_point
</UL>

<P><STRONG><a name="[89]"></a>a_st7789_write_bytes</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.a_st7789_write_bytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = a_st7789_write_bytes
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_fill_rect
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_clear
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_program_mode_enable
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_equalize_time_control
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_digital_gamma_look_up_table_blue
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_digital_gamma_look_up_table_red
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_negative_voltage_gamma_control
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_positive_voltage_gamma_control
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_command_2_enable
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_power_control_1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_vdv_vrh_from
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_gate_on_timing_adjustment
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_frame_rate_control
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_porch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_rgb_interface_control
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_set_ram_control
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_draw_point
</UL>

<P><STRONG><a name="[8a]"></a>a_st7789_show_char</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, driver_st7789_1.o(.text.a_st7789_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = a_st7789_show_char &rArr; a_st7789_draw_point &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_write_string
</UL>

<P><STRONG><a name="[87]"></a>a_st7789_draw_point</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, driver_st7789_1.o(.text.a_st7789_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = a_st7789_draw_point &rArr; a_st7789_write_bytes
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_bytes
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st7789_draw_point
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;a_st7789_show_char
</UL>

<P><STRONG><a name="[dc]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wire_1.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_clock_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wire_init
</UL>

<P><STRONG><a name="[8c]"></a>CLK_SysTickDelay</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, delay_1.o(.text.CLK_SysTickDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[ce]"></a>SYS_UnlockReg</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi2_1.o(.text.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[85]"></a>a_spi_cs_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi2_1.o(.text.a_spi_cs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = a_spi_cs_init &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[e1]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[de]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[e4]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e3]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[56]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
